table(DMP_unadj$P.Value < 0.05)#
# FALSE   TRUE #
# 304576  89884#
#
table(DMP_unadj$adj.P.Val < 0.05)#
# FALSE   TRUE #
# 351774  42686#
#
table(DMP_unadj$adj.P.Val.bonf < 0.05)#
 # FALSE   TRUE #
# 394076    384 #
#
DMP_unadj = cbind(DMP_unadj, anno[,'chr'][match(rownames(DMP_unadj), anno$Name)])#
DMP_unadj = cbind(DMP_unadj, anno[,'pos'][match(rownames(DMP_unadj), anno$Name)])#
DMP_unadj = cbind(DMP_unadj, anno[,'UCSC_RefGene_Name'][match(rownames(DMP_unadj), anno$Name)])#
colnames(DMP_unadj)[c(12,13,14)] = c('chr', 'pos', 'gene')#
#
DMP_unadj = DMP_unadj[order(DMP_unadj$P.Value),]#
#
EWASplot::qqplot(DMP_unadj$P.Value)
detach('EWASplot')
detach(EWASplot)
detach('package:EWASplot', unlaod = T)
detach('package:EWASplot')
devtools::install_github("annebozack/EWASplot")
library(EWASplot)
detach('package:EWASplot')
devtools::install_github("annebozack/EWASplot")
library(EWASplot)
detach('package:EWASplot')
setwd('/Users/annebozack/Documents/EWASplot')
devtools::document()
devtools::document()
devtools::install_github("annebozack/EWASplot")
library(EWASplot)
EWASplot::qq_plot(DMP_unadj$P.Value)
EWASplot::qq_plot(DMP_unadj$P.Value)
qq_plot
detach('package:EWASplot')
devtools::install_github("annebozack/EWASplot")
library(EWASplot)
EWASplot::qq_plot(DMP_unadj$P.Value)
detach('package:EWASplot')
devtools::install_github("annebozack/EWASplot")
library(EWASplot)
EWASplot::qq_plot(DMP_unadj$P.Value)
range(c(1:10))
range(c(1:10))[2]
range(c(1:10))[2]*0.9
qq_plot
detach('package:EWASplot')
devtools::install_github("annebozack/EWASplot")
devtools::install_github("annebozack/EWASplot", force = T)
library(EWAsplot)
library(EWASplot)
qq_plot
detach('package:EWASplot')
qq_plot
library(EWASplot)
detach('package:EWASplot')
remove.packages('EWASplot')
library(EWASplot)
devtools::install_github("annebozack/EWASplot")
library(EWASplot)
qq_plot(DMP_unadj$P.Value)
QQ_plot
qq_plot
detach('package:EWASplot')
remove.packages('EWASplot')
topTable
class(DMP_unadj)
IlluminaHumanMethylation450kanno.ilmn12.hg19:data(Locations)
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
loc = IlluminaHumanMethylation450kanno.ilmn12.hg19:data(Locations)
head(loc)
IlluminaHumanMethylation450kanno.ilmn12.hg19::data(Locations)
IlluminaHumanMethylation450kanno.ilmn12.hg19:data(Locations)
data(Locations)
IlluminaHumanMethylation450kanno.ilmn12.hg19:data(Locations)
IlluminaHumanMethylation450kanno.ilmn12.hg19:data()
objects()
head(Locatinos)
head(Locations)
dim(Locatiios)
dim(Locations)
dim(anno)
data()
data(Locations, package = 'IlluminaHumanMethylation450kanno.ilmn12.hg19')
dim(Locations)
is.numeric(Locations$chr)
region = NULL
is.null(regino)
is.null(region)
FDR
FDR = FALSE
FDR
FDR = T
FDR
is.true(FDR)
is.odd(2)
10 %% 2
11 %% 2
objects()
probe = DMP_unadj
region = NULL
array = '450K'
FDR = FALSE
title = NULL
col.chr = c('gray40', 'gray55')
col.sig = 'gray18'
col.dmr = 'black'
cex = 0.5
cex.sig = 0.75)
cex.sig = 0.75
'data.frame' %in% class(probe)
'P.Value' %in% colnames(probe)
'cpg' %in% colnames(probe)
'chr' %in% colnames(probe)
!is.numeric(probe$chr)
if (!is.numeric(probe$chr)){#
		probe$chr = as.numeric(gsub("chr", "", probe$chr))#
	}
probe$bonf = p.adjust(probe$P.Value, method = 'bonferroni')#
	if (FDR){#
		probe$FDR = p.adjust(probe$P.Value, method = 'fdr')#
	}
probe$color[probe$bonf < 0.05] = col.sig  # DMP probes#
	probe$size[probe$bonf < 0.05] = cex.sig#
	if (FDR){#
		probe$color[probe$FDR < 0.05] = col.sig#
		probe$size[probe$FDR < 0.05] = cex.sig#
	}#
	if (region){  # probes within regions#
		for (i in 1:nrow(region)){#
			probe$color[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = col.dmr#
			probe$size[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = cex.sig#
		}#
	}#
	probe$size[is.na(probe$color)] = cex#
	probe$color[is.na(probe$color)] = col.chr[(probe$chr %% 2) + 1] # all other probes
if (region)
region
is.null(region)
if (!is.null(region)){  # probes within regions#
		for (i in 1:nrow(region)){#
			probe$color[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = col.dmr#
			probe$size[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = cex.sig#
		}#
	}
head(probe)
don = probe %>% #
		group_by(chr) %>% summarise(chr_len=as.numeric(max(pos)))
don = probe %>% #
		group_by(chr) %>% summarise(chr_len=as.numeric(max(pos))) %>%  # Compute chromosome size#
	 	mutate(tot=cumsum(chr_len)-chr_len) %>% dplyr::select(-chr_len)
don = probe %>% #
		group_by(chr) %>% summarise(chr_len=as.numeric(max(pos))) %>%  # Compute chromosome size#
	 	mutate(tot=cumsum(chr_len)-chr_len) %>% dplyr::select(-chr_len) %>%  # Calculate cumulative position of each chromosome#
	  	left_join(probe, ., by=c("chr"="chr")) %>%  # Add this info to the initial dataset#
		arrange(chr, pos) %>% mutate(poscum=pos+tot)
head(don)
axisdf = don %>% group_by(chr) %>% summarize(center=(max(poscum) + min(poscum))/2)
probe = DMP_unadj
if (!is.numeric(probe$chr)){#
		probe$chr = as.numeric(gsub("chr", "", probe$chr))#
	}#
	# Bonferroni and FDR adjustment of p-values#
	probe$bonf = p.adjust(probe$P.Value, method = 'bonferroni')#
	if (FDR){#
		probe$FDR = p.adjust(probe$P.Value, method = 'fdr')#
	}#
	# variables for point color, size, and alpha#
	probe$color[probe$bonf < 0.05] = col.sig  # DMP probes#
	probe$size[probe$bonf < 0.05] = cex.sig#
	probe$alpha[probe$bonf < 0.05] = alpha.sig#
	if (FDR){#
		probe$color[probe$FDR < 0.05] = col.sig#
		probe$size[probe$FDR < 0.05] = cex.sig#
		probe$alpha[probe$FDR < 0.05] = alpha.sig#
	}#
	if (!is.null(region)){  # probes within regions#
		for (i in 1:nrow(region)){#
			probe$color[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = col.dmr#
			probe$size[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = cex.sig#
			probe$alpha[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = alpha.sig#
		}#
	}#
	probe$size[is.na(probe$color)] = cex#
	probe$size[is.na(probe$color)] = alpha#
	probe$color[is.na(probe$color)] = col.chr[(probe$chr %% 2) + 1] # all other probes
alpha = 0.5
alpha.sig = 1
probe = DMP_unadj
if (!is.numeric(probe$chr)){#
		probe$chr = as.numeric(gsub("chr", "", probe$chr))#
	}#
	# Bonferroni and FDR adjustment of p-values#
	probe$bonf = p.adjust(probe$P.Value, method = 'bonferroni')#
	if (FDR){#
		probe$FDR = p.adjust(probe$P.Value, method = 'fdr')#
	}#
	# variables for point color, size, and alpha#
	probe$color[probe$bonf < 0.05] = col.sig  # DMP probes#
	probe$size[probe$bonf < 0.05] = cex.sig#
	probe$alpha[probe$bonf < 0.05] = alpha.sig#
	if (FDR){#
		probe$color[probe$FDR < 0.05] = col.sig#
		probe$size[probe$FDR < 0.05] = cex.sig#
		probe$alpha[probe$FDR < 0.05] = alpha.sig#
	}#
	if (!is.null(region)){  # probes within regions#
		for (i in 1:nrow(region)){#
			probe$color[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = col.dmr#
			probe$size[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = cex.sig#
			probe$alpha[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = alpha.sig#
		}#
	}#
	probe$size[is.na(probe$color)] = cex#
	probe$size[is.na(probe$color)] = alpha#
	probe$color[is.na(probe$color)] = col.chr[(probe$chr %% 2) + 1] # all other probes
1%% 2
table(probe$chr)
col.chr
2%% 2
22%% 2
table(is.na(probe$color))
probe = DMP_unadj
if (!is.numeric(probe$chr)){#
		probe$chr = as.numeric(gsub("chr", "", probe$chr))#
	}#
	# Bonferroni and FDR adjustment of p-values#
	probe$bonf = p.adjust(probe$P.Value, method = 'bonferroni')#
	if (FDR){#
		probe$FDR = p.adjust(probe$P.Value, method = 'fdr')#
	}#
	# variables for point color, size, and alpha#
	probe$color[probe$bonf < 0.05] = col.sig  # DMP probes#
	probe$size[probe$bonf < 0.05] = cex.sig#
	probe$alpha[probe$bonf < 0.05] = alpha.sig#
	if (FDR){#
		probe$color[probe$FDR < 0.05] = col.sig#
		probe$size[probe$FDR < 0.05] = cex.sig#
		probe$alpha[probe$FDR < 0.05] = alpha.sig#
	}#
	if (!is.null(region)){  # probes within regions#
		for (i in 1:nrow(region)){#
			probe$color[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = col.dmr#
			probe$size[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = cex.sig#
			probe$alpha[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = alpha.sig#
		}#
	}#
	probe$size[is.na(probe$color)] = cex#
	probe$size[is.na(probe$color)] = alpha
table(is.na(probe$color))
probe$color[is.na(probe$color)] = probe$chr[is.na(probe$color)] %% 2
table(probe$color)
class(probe$color)
probe = DMP_unadj
if (!is.numeric(probe$chr)){#
		probe$chr = as.numeric(gsub("chr", "", probe$chr))#
	}#
	# Bonferroni and FDR adjustment of p-values#
	probe$bonf = p.adjust(probe$P.Value, method = 'bonferroni')#
	if (FDR){#
		probe$FDR = p.adjust(probe$P.Value, method = 'fdr')#
	}#
	# variables for point color, size, and alpha#
	probe$color[probe$bonf < 0.05] = col.sig  # DMP probes#
	probe$size[probe$bonf < 0.05] = cex.sig#
	probe$alpha[probe$bonf < 0.05] = alpha.sig#
	if (FDR){#
		probe$color[probe$FDR < 0.05] = col.sig#
		probe$size[probe$FDR < 0.05] = cex.sig#
		probe$alpha[probe$FDR < 0.05] = alpha.sig#
	}#
	if (!is.null(region)){  # probes within regions#
		for (i in 1:nrow(region)){#
			probe$color[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = col.dmr#
			probe$size[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = cex.sig#
			probe$alpha[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = alpha.sig#
		}#
	}#
	probe$size[is.na(probe$color)] = cex#
	probe$size[is.na(probe$color)] = alpha#
	probe$color[is.na(probe$color)] = col.chr[(probe$chr[is.na(probe$color)] %% 2) + 1]
table(probe$color)
don = probe %>% #
		group_by(chr) %>% summarise(chr_len=as.numeric(max(pos))) %>%  # Compute chromosome size#
	 	mutate(tot=cumsum(chr_len)-chr_len) %>% dplyr::select(-chr_len) %>%  # Calculate cumulative position of each chromosome#
	  	left_join(probe, ., by=c("chr"="chr")) %>%  # Add this info to the initial dataset#
		arrange(chr, pos) %>% mutate(poscum=pos+tot)  # Add a cumulative position of each site#
	 # Prepare X axis#
		axisdf = don %>% group_by(chr) %>% summarize(center=(max(poscum) + min(poscum))/2)
head(don)
table(don$alpha)
probe = DMP_unadj
if (!is.numeric(probe$chr)){#
		probe$chr = as.numeric(gsub("chr", "", probe$chr))#
	}#
	# Bonferroni and FDR adjustment of p-values#
	probe$bonf = p.adjust(probe$P.Value, method = 'bonferroni')#
	if (FDR){#
		probe$FDR = p.adjust(probe$P.Value, method = 'fdr')#
	}#
	# variables for point color, size, and alpha#
	probe$color[probe$bonf < 0.05] = col.sig  # DMP probes#
	probe$size[probe$bonf < 0.05] = cex.sig#
	probe$alpha[probe$bonf < 0.05] = alpha.sig#
	if (FDR){#
		probe$color[probe$FDR < 0.05] = col.sig#
		probe$size[probe$FDR < 0.05] = cex.sig#
		probe$alpha[probe$FDR < 0.05] = alpha.sig#
	}#
	if (!is.null(region)){  # probes within regions#
		for (i in 1:nrow(region)){#
			probe$color[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = col.dmr#
			probe$size[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = cex.sig#
			probe$alpha[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = alpha.sig#
		}#
	}#
	probe$size[is.na(probe$color)] = cex#
	probe$alpha[is.na(probe$color)] = alpha#
	probe$color[is.na(probe$color)] = col.chr[(probe$chr[is.na(probe$color)] %% 2) + 1]	#
	# dataset for plotting#
	don = probe %>% #
		group_by(chr) %>% summarise(chr_len=as.numeric(max(pos))) %>%  # Compute chromosome size#
	 	mutate(tot=cumsum(chr_len)-chr_len) %>% dplyr::select(-chr_len) %>%  # Calculate cumulative position of each chromosome#
	  	left_join(probe, ., by=c("chr"="chr")) %>%  # Add this info to the initial dataset#
		arrange(chr, pos) %>% mutate(poscum=pos+tot)  # Add a cumulative position of each site#
	 # Prepare X axis#
		axisdf = don %>% group_by(chr) %>% summarize(center=(max(poscum) + min(poscum))/2)
head(don)
manhattan = ggplot(don_position, aes(x = poscum, y = -log10(p))) +#
	geom_point(aes(color = color, size = size, alpha = alpha))
manhattan = ggplot(don, aes(x = poscum, y = -log10(p))) +#
	geom_point(aes(color = color, size = size, alpha = alpha))
ggplot(don, aes(x = poscum, y = -log10(p))) +#
	geom_point(aes(color = color, size = size, alpha = alpha))
ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(aes(color = color, size = size, alpha = alpha))
ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = color, size = size, alpha = alpha)
ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha)
head(axisdf)
ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
    # p-value cutoffs#
	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=.5, alpha = 1) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$p)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$p)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome')
ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
    # p-value cutoffs#
	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=.5, alpha = 1) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$p)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$p)) + 0.5), by = 1))
ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
    # p-value cutoffs#
	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=.5, alpha = 1) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal()
ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
    # p-value cutoffs#
	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=.5, alpha = 1) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome')
FDR
FDR = T
# Bonferroni and FDR adjustment of p-values#
	probe$bonf = p.adjust(probe$P.Value, method = 'bonferroni')#
	if (FDR){#
		probe$FDR = p.adjust(probe$P.Value, method = 'fdr')#
	}#
	# variables for point color, size, and alpha#
	probe$color[probe$bonf < 0.05] = col.sig  # DMP probes#
	probe$size[probe$bonf < 0.05] = cex.sig#
	probe$alpha[probe$bonf < 0.05] = alpha.sig#
	if (FDR){#
		probe$color[probe$FDR < 0.05] = col.sig#
		probe$size[probe$FDR < 0.05] = cex.sig#
		probe$alpha[probe$FDR < 0.05] = alpha.sig#
	}#
	if (!is.null(region)){  # probes within regions#
		for (i in 1:nrow(region)){#
			probe$color[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = col.dmr#
			probe$size[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = cex.sig#
			probe$alpha[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = alpha.sig#
		}#
	}#
	probe$size[is.na(probe$color)] = cex#
	probe$alpha[is.na(probe$color)] = alpha#
	probe$color[is.na(probe$color)] = col.chr[(probe$chr[is.na(probe$color)] %% 2) + 1]	#
	# dataset for plotting#
	don = probe %>% #
		group_by(chr) %>% summarise(chr_len=as.numeric(max(pos))) %>%  # Compute chromosome size#
	 	mutate(tot=cumsum(chr_len)-chr_len) %>% dplyr::select(-chr_len) %>%  # Calculate cumulative position of each chromosome#
	  	left_join(probe, ., by=c("chr"="chr")) %>%  # Add this info to the initial dataset#
		arrange(chr, pos) %>% mutate(poscum=pos+tot)  # Add a cumulative position of each site#
	 # Prepare X axis#
		axisdf = don %>% group_by(chr) %>% summarize(center=(max(poscum) + min(poscum))/2)#
	manhattan = ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
    # p-value cutoffs#
	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=.5, alpha = 1) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome') #
    if (!is.null(region)){#
    	manhattan = manhattan + geom_vline(xintercept= region$start, colour = '#4393c3', size=.2) +#
    }#
    if (!is.null(title)){#
    	manhattan = manhattan + labs(title = title)#
    }#
    if (FDR == TRUE){#
    	manhattan = manhattan + geom_hline(yintercept=-log10(max(don_position$p[don_position$fdr < 0.05])), colour='#AB3428', size=.5, alpha = 1, linetype = "dashed")#
    } #
    if (!is.null(annotate)){#
		manhattan = manhattan + annotate("text", x = max(don_position$poscum)*0.05, y = max(-log10(don_position$p)), label = annotate, size = 4)#
	}#
	return(manhattan)
# variables for point color, size, and alpha#
	probe$color[probe$bonf < 0.05] = col.sig  # DMP probes#
	probe$size[probe$bonf < 0.05] = cex.sig#
	probe$alpha[probe$bonf < 0.05] = alpha.sig#
	if (FDR){#
		probe$color[probe$FDR < 0.05] = col.sig#
		probe$size[probe$FDR < 0.05] = cex.sig#
		probe$alpha[probe$FDR < 0.05] = alpha.sig#
	}#
	if (!is.null(region)){  # probes within regions#
		for (i in 1:nrow(region)){#
			probe$color[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = col.dmr#
			probe$size[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = cex.sig#
			probe$alpha[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = alpha.sig#
		}#
	}#
	probe$size[is.na(probe$color)] = cex#
	probe$alpha[is.na(probe$color)] = alpha#
	probe$color[is.na(probe$color)] = col.chr[(probe$chr[is.na(probe$color)] %% 2) + 1]
don = probe %>% #
		group_by(chr) %>% summarise(chr_len=as.numeric(max(pos))) %>%  # Compute chromosome size#
	 	mutate(tot=cumsum(chr_len)-chr_len) %>% dplyr::select(-chr_len) %>%  # Calculate cumulative position of each chromosome#
	  	left_join(probe, ., by=c("chr"="chr")) %>%  # Add this info to the initial dataset#
		arrange(chr, pos) %>% mutate(poscum=pos+tot)  # Add a cumulative position of each site#
	 # Prepare X axis#
		axisdf = don %>% group_by(chr) %>% summarize(center=(max(poscum) + min(poscum))/2)
manhattan = ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
    # p-value cutoffs#
	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=.5, alpha = 1) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome') #
    if (!is.null(region)){#
    	manhattan = manhattan + geom_vline(xintercept= region$start, colour = '#4393c3', size=.2) +#
    }#
    if (!is.null(title)){#
    	manhattan = manhattan + labs(title = title)#
    }#
    if (FDR == TRUE){#
    	manhattan = manhattan + geom_hline(yintercept=-log10(max(don_position$p[don_position$fdr < 0.05])), colour='#AB3428', size=.5, alpha = 1, linetype = "dashed")#
    } #
    if (!is.null(annotate)){#
		manhattan = manhattan + annotate("text", x = max(don_position$poscum)*0.05, y = max(-log10(don_position$p)), label = annotate, size = 4)#
	}
manhattan = ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
    # p-value cutoffs#
	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=.5, alpha = 1) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome') #
    if (!is.null(region)){#
    	manhattan = manhattan + geom_vline(xintercept= region$start, colour = '#4393c3', size=.2)#
    }#
    if (!is.null(title)){#
    	manhattan = manhattan + labs(title = title)#
    }#
    if (FDR == TRUE){#
    	manhattan = manhattan + geom_hline(yintercept=-log10(max(don_position$p[don_position$fdr < 0.05])), colour='#AB3428', size=.5, alpha = 1, linetype = "dashed")#
    } #
    if (!is.null(annotate)){#
		manhattan = manhattan + annotate("text", x = max(don_position$poscum)*0.05, y = max(-log10(don_position$p)), label = annotate, size = 4)#
	}
manhattan = ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
    # p-value cutoffs#
	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=.5, alpha = 1) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome') #
    if (!is.null(region)){#
    	manhattan = manhattan + geom_vline(xintercept= region$start, colour = '#4393c3', size=.2)#
    }#
    if (!is.null(title)){#
    	manhattan = manhattan + labs(title = title)#
    }#
    if (FDR == TRUE){#
    	manhattan = manhattan + geom_hline(yintercept=-log10(max(don_position$p[don$fdr < 0.05])), colour='#AB3428', size=.5, alpha = 1, linetype = "dashed")#
    } #
    if (!is.null(annotate)){#
		manhattan = manhattan + annotate("text", x = max(don$poscum)*0.05, y = max(-log10(don$p)), label = annotate, size = 4)#
	}
manhattan = ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
    # p-value cutoffs#
	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=.5, alpha = 1) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome') #
    if (!is.null(region)){#
    	manhattan = manhattan + geom_vline(xintercept= region$start, colour = '#4393c3', size=.2)#
    }#
    if (!is.null(title)){#
    	manhattan = manhattan + labs(title = title)#
    }#
    if (FDR == TRUE){#
    	manhattan = manhattan + geom_hline(yintercept=-log10(max(don$p[don$fdr < 0.05])), colour='#AB3428', size=.5, alpha = 1, linetype = "dashed")#
    } #
    if (!is.null(annotate)){#
		manhattan = manhattan + annotate("text", x = max(don$poscum)*0.05, y = max(-log10(don$p)), label = annotate, size = 4)#
	}
manhattan = ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
    # p-value cutoffs#
	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=.5, alpha = 1) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome') #
    if (!is.null(region)){#
    	manhattan = manhattan + geom_vline(xintercept= region$start, colour = '#4393c3', size=.2)#
    }#
    if (!is.null(title)){#
    	manhattan = manhattan + labs(title = title)#
    }#
    if (FDR == TRUE){#
    	manhattan = manhattan + geom_hline(yintercept=-log10(max(don$P.Value[don$FDR < 0.05])), colour='#AB3428', size=.5, alpha = 1, linetype = "dashed")#
    } #
    if (!is.null(annotate)){#
		manhattan = manhattan + annotate("text", x = max(don$poscum)*0.05, y = max(-log10(don$P.Value)), label = annotate, size = 4)#
	}
manhattan
ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
    # p-value cutoffs#
	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=.5, alpha = 1) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome')
manhattan = ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
    # p-value cutoffs#
	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=.5, alpha = 1) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome')
if (!is.null(region)){#
    	manhattan = manhattan + geom_vline(xintercept= region$start, colour = '#4393c3', size=.2)#
    }
library(DMRcate)
extractRanges
head(probe)
range(probe$pos[probe$chr == 1])
range(probe$pos[probe$chr == 5])
range(probe$pos[probe$chr == 6])
range(probe$pos[probe$chr == 9])
range(probe$pos[probe$chr == 15])
range(probe$pos[probe$chr == 18])
range(probe$pos[probe$chr == 19])
region = data.frame(chr = c(1,5,6,6,9,15,18,19), start = c(112000000, 50699332, 51036378, 151036378, 91105974, 8506237, 707841, 55508), end = c(112000010, 50699300, 51036600, 151036500, 91105990, 8506600, 707900, 55568))
head(don)
head(prob)
head(probe)
don = probe %>% #
		group_by(chr) %>% summarise(chr_len=as.numeric(max(pos)))
head(don)
don
don = probe %>% #
		group_by(chr) %>% summarise(chr_len=as.numeric(max(pos))) %>%  # Compute chromosome size#
	 	mutate(tot=cumsum(chr_len)-chr_len) %>% dplyr::select(-chr_len)
head(don)
don
don = probe %>% #
		group_by(chr) %>% summarise(chr_len=as.numeric(max(pos))) %>%  # Compute chromosome size#
	 	mutate(tot=cumsum(chr_len)-chr_len) %>% dplyr::select(-chr_len) %>%  # Calculate cumulative position of each chromosome#
	  	left_join(probe, ., by=c("chr"="chr"))
head(don)
? left_join
chrdat = probe %>% #
		group_by(chr) %>% summarise(chr_len=as.numeric(max(pos))) %>%  # Compute chromosome size#
	 	mutate(tot=cumsum(chr_len)-chr_len) %>% dplyr::select(-chr_len)
chrdat
don = left_join(probe, don, by=c("chr"="chr")) %>%  # Add this info to the initial dataset#
		arrange(chr, pos) %>% mutate(poscum=pos+tot)
don = left_join(probe, chrdat, by=c("chr"="chr")) %>%  # Add this info to the initial dataset#
		arrange(chr, pos) %>% mutate(poscum=pos+tot)
head(don)
dim(don)
don_reg = left_join(region, chrdat, by=c("chr"="chr")) %>%  # Add this info to the initial dataset#
		arrange(chr, start) %>% mutate(poscum=start+tot)
don_reg
!is.null(region)
region = data.frame(chr = c(1,5,6,6,9,15,18,19), start = c(112000000, 50699332, 51036378, 151036378, 91105974, 8506237, 707841, 55508), end = c(112000010, 50699900, 51036600, 151036500, 91105990, 8506600, 707900, 55568))
# chr as numeric#
	if (!is.numeric(probe$chr)){#
		probe$chr = as.numeric(gsub("chr", "", probe$chr))#
	}#
	# Bonferroni and FDR adjustment of p-values#
	probe$bonf = p.adjust(probe$P.Value, method = 'bonferroni')#
	if (FDR){#
		probe$FDR = p.adjust(probe$P.Value, method = 'fdr')#
	}#
	# variables for point color, size, and alpha#
	probe$color[probe$bonf < 0.05] = col.sig  # DMP probes#
	probe$size[probe$bonf < 0.05] = cex.sig#
	probe$alpha[probe$bonf < 0.05] = alpha.sig#
	if (FDR){#
		probe$color[probe$FDR < 0.05] = col.sig#
		probe$size[probe$FDR < 0.05] = cex.sig#
		probe$alpha[probe$FDR < 0.05] = alpha.sig#
	}#
	if (!is.null(region)){  # probes within regions#
		for (i in 1:nrow(region)){#
			probe$color[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = col.dmr#
			probe$size[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = cex.sig#
			probe$alpha[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = alpha.sig#
		}#
	}#
	probe$size[is.na(probe$color)] = cex#
	probe$alpha[is.na(probe$color)] = alpha#
	probe$color[is.na(probe$color)] = col.chr[(probe$chr[is.na(probe$color)] %% 2) + 1]	#
	# combine probe and region datasets#
	region = region[,c('chr', 'start')]#
	probe = cbind(probe[,c('cpg', 'P.Value', )], data.frame())#
	chrdat = probe %>% #
		group_by(chr) %>% summarise(chr_len=as.numeric(max(pos))) %>%  # Compute chromosome size#
	 	mutate(tot=cumsum(chr_len)-chr_len) %>% dplyr::select(-chr_len)#
	don = left_join(probe, chrdat, by=c("chr"="chr")) %>%  # Add this info to the initial dataset#
		arrange(chr, pos) %>% mutate(poscum=pos+tot) #
	don_reg = left_join(region, chrdat, by=c("chr"="chr")) %>%  # Add this info to the initial dataset#
		arrange(chr, start) %>% mutate(poscum=start+tot) #
	axisdf = don %>% group_by(chr) %>% summarize(center=(max(poscum) + min(poscum))/2)#
	manhattan = ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
    # p-value cutoffs#
	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=.5, alpha = 1) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome') #
    if (!is.null(region)){#
    	manhattan = manhattan + geom_vline(xintercept= region$poscum, colour = '#4393c3', size=.2)#
    }#
    if (!is.null(title)){#
    	manhattan = manhattan + labs(title = title)#
    }#
    if (FDR == TRUE){#
    	manhattan = manhattan + geom_hline(yintercept=-log10(max(don$P.Value[don$FDR < 0.05])), colour='#AB3428', size=.5, alpha = 1, linetype = "dashed")#
    } #
    if (!is.null(annotate)){#
		manhattan = manhattan + annotate("text", x = max(don$poscum)*0.05, y = max(-log10(don$P.Value)), label = annotate, size = 4)#
	}
# chr as numeric#
	if (!is.numeric(probe$chr)){#
		probe$chr = as.numeric(gsub("chr", "", probe$chr))#
	}#
	# Bonferroni and FDR adjustment of p-values#
	probe$bonf = p.adjust(probe$P.Value, method = 'bonferroni')#
	if (FDR){#
		probe$FDR = p.adjust(probe$P.Value, method = 'fdr')#
	}#
	# variables for point color, size, and alpha#
	probe$color[probe$bonf < 0.05] = col.sig  # DMP probes#
	probe$size[probe$bonf < 0.05] = cex.sig#
	probe$alpha[probe$bonf < 0.05] = alpha.sig#
	if (FDR){#
		probe$color[probe$FDR < 0.05] = col.sig#
		probe$size[probe$FDR < 0.05] = cex.sig#
		probe$alpha[probe$FDR < 0.05] = alpha.sig#
	}#
	if (!is.null(region)){  # probes within regions#
		for (i in 1:nrow(region)){#
			probe$color[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = col.dmr#
			probe$size[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = cex.sig#
			probe$alpha[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = alpha.sig#
		}#
	}#
	probe$size[is.na(probe$color)] = cex#
	probe$alpha[is.na(probe$color)] = alpha#
	probe$color[is.na(probe$color)] = col.chr[(probe$chr[is.na(probe$color)] %% 2) + 1]	#
	chrdat = probe %>% #
		group_by(chr) %>% summarise(chr_len=as.numeric(max(pos))) %>%  # Compute chromosome size#
	 	mutate(tot=cumsum(chr_len)-chr_len) %>% dplyr::select(-chr_len)#
	don = left_join(probe, chrdat, by=c("chr"="chr")) %>%  # Add this info to the initial dataset#
		arrange(chr, pos) %>% mutate(poscum=pos+tot) #
	don_reg = left_join(region, chrdat, by=c("chr"="chr")) %>%  # Add this info to the initial dataset#
		arrange(chr, start) %>% mutate(poscum=start+tot) #
	axisdf = don %>% group_by(chr) %>% summarize(center=(max(poscum) + min(poscum))/2)#
	manhattan = ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
    # p-value cutoffs#
	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=.5, alpha = 1) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome') #
    if (!is.null(region)){#
    	manhattan = manhattan + geom_vline(xintercept= region$poscum, colour = '#4393c3', size=.2)#
    }#
    if (!is.null(title)){#
    	manhattan = manhattan + labs(title = title)#
    }#
    if (FDR == TRUE){#
    	manhattan = manhattan + geom_hline(yintercept=-log10(max(don$P.Value[don$FDR < 0.05])), colour='#AB3428', size=.5, alpha = 1, linetype = "dashed")#
    } #
    if (!is.null(annotate)){#
		manhattan = manhattan + annotate("text", x = max(don$poscum)*0.05, y = max(-log10(don$P.Value)), label = annotate, size = 4)#
	}
objects()
probe = DMP_unadj
# chr as numeric#
	if (!is.numeric(probe$chr)){#
		probe$chr = as.numeric(gsub("chr", "", probe$chr))#
	}#
	# Bonferroni and FDR adjustment of p-values#
	probe$bonf = p.adjust(probe$P.Value, method = 'bonferroni')#
	if (FDR){#
		probe$FDR = p.adjust(probe$P.Value, method = 'fdr')#
	}#
	# variables for point color, size, and alpha#
	probe$color[probe$bonf < 0.05] = col.sig  # DMP probes#
	probe$size[probe$bonf < 0.05] = cex.sig#
	probe$alpha[probe$bonf < 0.05] = alpha.sig#
	if (FDR){#
		probe$color[probe$FDR < 0.05] = col.sig#
		probe$size[probe$FDR < 0.05] = cex.sig#
		probe$alpha[probe$FDR < 0.05] = alpha.sig#
	}#
	if (!is.null(region)){  # probes within regions#
		for (i in 1:nrow(region)){#
			probe$color[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = col.dmr#
			probe$size[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = cex.sig#
			probe$alpha[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = alpha.sig#
		}#
	}#
	probe$size[is.na(probe$color)] = cex#
	probe$alpha[is.na(probe$color)] = alpha#
	probe$color[is.na(probe$color)] = col.chr[(probe$chr[is.na(probe$color)] %% 2) + 1]	#
	chrdat = probe %>% #
		group_by(chr) %>% summarise(chr_len=as.numeric(max(pos))) %>%  # Compute chromosome size#
	 	mutate(tot=cumsum(chr_len)-chr_len) %>% dplyr::select(-chr_len)#
	don = left_join(probe, chrdat, by=c("chr"="chr")) %>%  # Add this info to the initial dataset#
		arrange(chr, pos) %>% mutate(poscum=pos+tot) #
	don_reg = left_join(region, chrdat, by=c("chr"="chr")) %>%  # Add this info to the initial dataset#
		arrange(chr, start) %>% mutate(poscum=start+tot) #
	axisdf = don %>% group_by(chr) %>% summarize(center=(max(poscum) + min(poscum))/2)#
	manhattan = ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
    # p-value cutoffs#
	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=.5, alpha = 1) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome') #
    if (!is.null(region)){#
    	manhattan = manhattan + geom_vline(xintercept= region$poscum, colour = '#4393c3', size=.2)#
    }#
    if (!is.null(title)){#
    	manhattan = manhattan + labs(title = title)#
    }#
    if (FDR == TRUE){#
    	manhattan = manhattan + geom_hline(yintercept=-log10(max(don$P.Value[don$FDR < 0.05])), colour='#AB3428', size=.5, alpha = 1, linetype = "dashed")#
    } #
    if (!is.null(annotate)){#
		manhattan = manhattan + annotate("text", x = max(don$poscum)*0.05, y = max(-log10(don$P.Value)), label = annotate, size = 4)#
	}
manhattan
ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
    # p-value cutoffs#
	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=.5, alpha = 1) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome')
!is.null(region)
manhattan = ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
    # p-value cutoffs#
	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=.5, alpha = 1) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome')
manhattan
region$poscum
manhattan = manhattan + geom_vline(xintercept = don_reg$poscum, colour = '#4393c3', size=.2)
manhattan
line.dmr = '#4393c3'
size.bonf = 0.5
size.FDR = 0.5
head(don)
min(don$adj.P.Val.bonf)
manhattan = ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome') #
    if (!is.null(region)){#
    	manhattan = manhattan + geom_vline(xintercept = don_reg$poscum, colour = line.dmr, size=size.line.dmr)#
    }#
    if (!is.null(title)){#
    	manhattan = manhattan + labs(title = title)#
    }#
    # p-value cutoffs#
    if (min(don$adj.P.Val.bonf < 0.05)){#
    	manhattan = manhattan + 	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=size.bonf)#
    }	#
    if (FDR == TRUE){#
    	manhattan = manhattan + geom_hline(yintercept=-log10(max(don$P.Value[don$FDR < 0.05])), colour='#AB3428', size=size.FDR, linetype = "dashed")#
    } #
    if (!is.null(annotate)){#
		manhattan = manhattan + annotate("text", x = max(don$poscum)*0.05, y = max(-log10(don$P.Value)), label = annotate, size = 4)#
	}
size.line.dmr = 0.2
manhattan = ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome') #
    if (!is.null(region)){#
    	manhattan = manhattan + geom_vline(xintercept = don_reg$poscum, colour = line.dmr, size=size.line.dmr)#
    }#
    if (!is.null(title)){#
    	manhattan = manhattan + labs(title = title)#
    }#
    # p-value cutoffs#
    if (min(don$adj.P.Val.bonf < 0.05)){#
    	manhattan = manhattan + 	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=size.bonf)#
    }	#
    if (FDR == TRUE){#
    	manhattan = manhattan + geom_hline(yintercept=-log10(max(don$P.Value[don$FDR < 0.05])), colour='#AB3428', size=size.FDR, linetype = "dashed")#
    } #
    if (!is.null(annotate)){#
		manhattan = manhattan + annotate("text", x = max(don$poscum)*0.05, y = max(-log10(don$P.Value)), label = annotate, size = 4)#
	}
manhattan
ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome')
manhattan = ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome')
manhattan
if (!is.null(region)){#
    	manhattan = manhattan + geom_vline(xintercept = don_reg$poscum, colour = line.dmr, size=size.line.dmr)#
    }
manhattan
# p-value cutoffs#
    if (min(don$adj.P.Val.bonf) < 0.05){#
    	manhattan = manhattan + 	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=size.bonf)#
    }
manhattan
if (FDR == TRUE){#
    	manhattan = manhattan + geom_hline(yintercept=-log10(max(don$P.Value[don$FDR < 0.05])), colour='#AB3428', size=size.FDR, linetype = "dashed")#
    }
axisdf = don %>% group_by(chr) %>% summarize(center=(max(poscum) + min(poscum))/2)
axisdf
manhattan = ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome') #
    if (!is.null(region)){#
    	manhattan = manhattan + geom_vline(xintercept = don_reg$poscum, colour = line.dmr, size=size.line.dmr) + geom_point(color = col.dmr, size = cex.sig, alpha = alpha.sig)#
    }#
    if (!is.null(title)){#
    	manhattan = manhattan + labs(title = title)#
    }#
    # p-value cutoffs#
    if (min(don$adj.P.Val.bonf) < 0.05){#
    	manhattan = manhattan + 	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=size.sig)#
    }	#
    if (FDR == TRUE){#
    	manhattan = manhattan + geom_hline(yintercept=-log10(max(don$P.Value[don$FDR < 0.05])), colour='#AB3428', size=size.sig, linetype = "dashed")#
    }
size.line.sig = 0.5
manhattan = ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome') #
    if (!is.null(region)){#
    	manhattan = manhattan + geom_vline(xintercept = don_reg$poscum, colour = line.dmr, size=size.line.dmr) + geom_point(color = col.dmr, size = cex.sig, alpha = alpha.sig)#
    }#
    if (!is.null(title)){#
    	manhattan = manhattan + labs(title = title)#
    }#
    # p-value cutoffs#
    if (min(don$adj.P.Val.bonf) < 0.05){#
    	manhattan = manhattan + 	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=size.sig)#
    }	#
    if (FDR == TRUE){#
    	manhattan = manhattan + geom_hline(yintercept=-log10(max(don$P.Value[don$FDR < 0.05])), colour='#AB3428', size=size.sig, linetype = "dashed")#
    }
manhattan = ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome') #
    if (!is.null(region)){#
    	manhattan = manhattan + geom_vline(xintercept = don_reg$poscum, colour = line.dmr, size=size.line.dmr) + geom_point(color = col.dmr, size = cex.sig, alpha = alpha.sig)#
    }#
    if (!is.null(title)){#
    	manhattan = manhattan + labs(title = title)#
    }#
    # p-value cutoffs#
    if (min(don$adj.P.Val.bonf) < 0.05){#
    	manhattan = manhattan + 	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=size.line.sig)#
    }	#
    if (FDR == TRUE){#
    	manhattan = manhattan + geom_hline(yintercept=-log10(max(don$P.Value[don$FDR < 0.05])), colour='#AB3428', size=size.line.sig, linetype = "dashed")#
    }
manhattan
col.dmr = 'black'
manhattan = ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome') #
    if (!is.null(region)){#
    	manhattan = manhattan + geom_vline(xintercept = don_reg$poscum, colour = line.dmr, size=size.line.dmr)#
    }#
    if (!is.null(title)){#
    	manhattan = manhattan + labs(title = title)#
    }#
    # p-value cutoffs#
    if (min(don$adj.P.Val.bonf) < 0.05){#
    	manhattan = manhattan + 	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=size.line.sig)#
    }	#
    if (FDR == TRUE){#
    	manhattan = manhattan + geom_hline(yintercept=-log10(max(don$P.Value[don$FDR < 0.05])), colour='#AB3428', size=size.line.sig, linetype = "dashed")#
    }
manhattan
col.sig = 'pink'
manhattan = ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome') #
    if (!is.null(region)){#
    	manhattan = manhattan + geom_vline(xintercept = don_reg$poscum, colour = line.dmr, size=size.line.dmr)#
    }#
    if (!is.null(title)){#
    	manhattan = manhattan + labs(title = title)#
    }#
    # p-value cutoffs#
    if (min(don$adj.P.Val.bonf) < 0.05){#
    	manhattan = manhattan + 	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=size.line.sig)#
    }	#
    if (FDR == TRUE){#
    	manhattan = manhattan + geom_hline(yintercept=-log10(max(don$P.Value[don$FDR < 0.05])), colour='#AB3428', size=size.line.sig, linetype = "dashed")#
    }
manhattan
if (!is.numeric(probe$chr)){#
		probe$chr = as.numeric(gsub("chr", "", probe$chr))#
	}#
	# Bonferroni and FDR adjustment of p-values#
	probe$bonf = p.adjust(probe$P.Value, method = 'bonferroni')#
	if (FDR){#
		probe$FDR = p.adjust(probe$P.Value, method = 'fdr')#
	}#
	# variables for point color, size, and alpha#
	probe$color[probe$bonf < 0.05] = col.sig  # DMP probes#
	probe$size[probe$bonf < 0.05] = cex.sig#
	probe$alpha[probe$bonf < 0.05] = alpha.sig#
	if (FDR){#
		probe$color[probe$FDR < 0.05] = col.sig#
		probe$size[probe$FDR < 0.05] = cex.sig#
		probe$alpha[probe$FDR < 0.05] = alpha.sig#
	}#
	if (!is.null(region)){  # probes within regions#
		for (i in 1:nrow(region)){#
			probe$color[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = col.dmr#
			probe$size[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = cex.sig#
			probe$alpha[(probe$chr == region$chr[i]) & (probe$pos >= region$start[i]) & (probe$pos <= region$end[i])] = alpha.sig#
		}#
	}#
	probe$size[is.na(probe$color)] = cex#
	probe$alpha[is.na(probe$color)] = alpha#
	probe$color[is.na(probe$color)] = col.chr[(probe$chr[is.na(probe$color)] %% 2) + 1]	#
	chrdat = probe %>% #
		group_by(chr) %>% summarise(chr_len=as.numeric(max(pos))) %>%  # Compute chromosome size#
	 	mutate(tot=cumsum(chr_len)-chr_len) %>% dplyr::select(-chr_len)#
	don = left_join(probe, chrdat, by=c("chr"="chr")) %>%  # Add this info to the initial dataset#
		arrange(chr, pos) %>% mutate(poscum=pos+tot) #
	don_reg = left_join(region, chrdat, by=c("chr"="chr")) %>%  # Add this info to the initial dataset#
		arrange(chr, start) %>% mutate(poscum=start+tot) #
	axisdf = don %>% group_by(chr) %>% summarize(center=(max(poscum) + min(poscum))/2)#
	manhattan = ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
	# custom axes:#
	scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    theme_minimal() + theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    labs(y=expression(-log[10](italic(p))), x='Chromosome') #
    if (!is.null(region)){#
    	manhattan = manhattan + geom_vline(xintercept = don_reg$poscum, colour = line.dmr, size=size.line.dmr)#
    }#
    if (!is.null(title)){#
    	manhattan = manhattan + labs(title = title)#
    }#
    # p-value cutoffs#
    if (min(don$adj.P.Val.bonf) < 0.05){#
    	manhattan = manhattan + 	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=size.line.sig)#
    }	#
    if (FDR == TRUE){#
    	manhattan = manhattan + geom_hline(yintercept=-log10(max(don$P.Value[don$FDR < 0.05])), colour='#AB3428', size=size.line.sig, linetype = "dashed")#
    }
manhattan
?arrange
chrdat = probe %>% #
		dplyr::group_by(chr) %>% dplyr::summarise(chr_len=as.numeric(max(pos))) %>%  # Compute chromosome size#
	 	dplyr::mutate(tot=cumsum(chr_len)-chr_len) %>% dplyr::select(-chr_len)#
	don = left_join(probe, chrdat, by=c("chr"="chr")) %>%  # Add this info to the initial dataset#
		dplyr::arrange(chr, pos) %>% dplyr::mutate(poscum=pos+tot) #
	don_reg = dplyr::left_join(region, chrdat, by=c("chr"="chr")) %>%  # Add this info to the initial dataset#
		dplyr::arrange(chr, start) %>% dplyr::mutate(poscum=start+tot) #
	axisdf = don %>% dplyr::group_by(chr) %>% dplyr::summarize(center=(max(poscum) + min(poscum))/2)
head(don)
manhattan = ggplot2::ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	ggplot2::geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
	# custom axes:#
	ggplot2::scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	ggplot2::scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    ggplot2::theme_minimal() + ggplot2::theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    ggplot2::labs(y=expression(-log[10](italic(p))), x='Chromosome')
manhattan
manhattan = ggplot2::ggplot(don, aes(x = poscum, y = -log10(P.Value))) +#
	ggplot2::geom_point(color = don$color, size = don$size, alpha = don$alpha) +#
	# custom axes:#
	ggplot2::scale_x_continuous(expand = c(0.005, 0.005), limits = c(min(don$poscum), max(don$poscum)), label = axisdf$chr, breaks= axisdf$center) +#
	ggplot2::scale_y_continuous(expand = c(0, 0), limits = c(0, (max(-log10(don$P.Value)) + 0.5)), breaks = seq(from = 0, to = (max(-log10(don$P.Value)) + 0.5), by = 1)) +#
	# Custom theme:#
    ggplot2::theme_minimal() + ggplot2::theme( #
	legend.position="none", panel.border = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), text = element_text(size = 7.5)) + #
    ggplot2::labs(y=expression(-log[10](italic(p))), x='Chromosome') #
    if (!is.null(region)){#
    	manhattan = manhattan + ggplot2::geom_vline(xintercept = don_reg$poscum, colour = line.dmr, size=size.line.dmr)#
    }#
    if (!is.null(title)){#
    	manhattan = manhattan + ggplot2::labs(title = title)#
    }#
    # p-value cutoffs#
    if (min(don$adj.P.Val.bonf) < 0.05){#
    	manhattan = manhattan + ggplot2::	geom_hline(yintercept=-log10(0.05/nrow(don)), colour = '#AB3428', size=size.line.sig)#
    }	#
    if (FDR == TRUE){#
    	manhattan = manhattan + ggplot2::geom_hline(yintercept=-log10(max(don$P.Value[don$FDR < 0.05])), colour='#AB3428', size=size.line.sig, linetype = "dashed")#
    }
manhattan
